package sg.edu.nus.logging;

import sg.edu.nus.protocol.MsgType;

public enum REPORT_ITEM {
	NUM_LOCAL_QUERIES("SELECT COUNT(*) FROM LOG_QUERY"),

	NUM_SUCCESSFULL_LOCAL_QUERIES(
			"SELECT COUNT(*) FROM LOG_QUERY WHERE DURATION IS NOT NULL"),

	NUM_QUERIES("SELECT COUNT(*) FROM LOG_MSG WHERE RECEIVER IS NULL AND HEAD="
			+ MsgType.QUERY_PEER.getValue()),

	NUM_INDEX_QUERIES(
			"SELECT COUNT(*) FROM LOG_MSG WHERE RECEIVER IS NULL AND HEAD="
					+ MsgType.TABLE_INDEX_SEARCH.getValue()),

	NUM_INCOMING_MSGS("SELECT COUNT(*) FROM LOG_MSG WHERE SENDER IS NULL"),

	NUM_OUTGOING_MSGS("SELECT COUNT(*) FROM LOG_MSG WHERE RECEIVER IS NULL"),

	SIZE_INCOMING_MSGS("SELECT SUM(SIZE) FROM LOG_MSG WHERE SENDER IS NULL"),

	SIZE_OUTGOING_MSGS("SELECT SUM(SIZE) FROM LOG_MSG WHERE RECEIVER IS NULL");

	private final String timefunc = "TIMESTAMPDIFF( #TIME_UNIT#, time, current_timestamp) >= #START# "
			+ "and TIMESTAMPDIFF( #TIME_UNIT#, time, current_timestamp) < #END#";

	public final static REPORT_ITEM[] itemset = {
			REPORT_ITEM.NUM_INCOMING_MSGS, REPORT_ITEM.NUM_OUTGOING_MSGS,
			REPORT_ITEM.SIZE_INCOMING_MSGS, REPORT_ITEM.SIZE_OUTGOING_MSGS,
			REPORT_ITEM.NUM_LOCAL_QUERIES,
			REPORT_ITEM.NUM_SUCCESSFULL_LOCAL_QUERIES, REPORT_ITEM.NUM_QUERIES,
			REPORT_ITEM.NUM_INDEX_QUERIES };

	private final String querySQL;

	REPORT_ITEM(String sql) {
		this.querySQL = sql;
	}

	public String getQueryCondition() {
		return timefunc;
	}

	public String getQuerySQL() {
		return this.querySQL;
	}
}